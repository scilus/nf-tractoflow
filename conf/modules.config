/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

params.preproc_dwi_run_denoising = params.run_dwi_denoising
params.preproc_dwi_run_degibbs = params.run_gibbs_correction
params.topup_eddy_run_topup = params.run_topup
params.topup_eddy_run_eddy = params.run_eddy
params.preproc_dwi_run_N4 = true
params.preproc_t1_run_denoising = params.run_t1_denoising
params.preproc_t1_run_N4 = true
params.preproc_t1_run_synthbet = false
params.preproc_t1_run_ants_bet = true
params.preproc_t1_run_crop = true
params.preproc_dwi_run_resampling = params.run_resample_dwi
params.preproc_t1_run_resampling = params.run_resample_t1
params.run_pft = params.run_pft_tracking
params.frf_average_from_data = params.mean_frf

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(":")[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
    ]

    /* SUBWORKFLOWS CONFIGURATION */

    withName: ".*:RUN:PREPROC_DWI:DENOISE_DWI" {
        cpus = params.processes_denoise_dwi

        ext.extent = params.extent
    }

    withName: ".*:RUN:PREPROC_DWI:DENOISE_REVDWI" {
        cpus = params.processes_denoise_dwi

        ext.extent = params.extent
    }

    withName: ".*:RUN:PREPROC_DWI:TOPUP_EDDY:UTILS_EXTRACTB0" {
        ext.b0_extraction_strategy = "mean"
    }

    withName: ".*:RUN:PREPROC_DWI:TOPUP_EDDY:PREPROC_TOPUP" {
        ext.prefix_topup            = params.prefix_topup
        ext.default_config_topup    = params.config_topup
        ext.encoding                = params.encoding_direction  //FIXME : this is subject bound, pass through meta ?
        ext.readout                 = params.readout             //FIXME : this is subject bound, pass through meta ?
        ext.b0_thr_extract_b0       = params.b0_thr_extract_b0
    }

    withName: ".*:RUN:PREPROC_DWI:TOPUP_EDDY:PREPROC_EDDY" {
        cpus = params.processes_eddy

        ext.prefix_topup                            = params.prefix_topup
        ext.slice_drop_flag                         = params.use_slice_drop_correction
        ext.bet_topup_before_eddy_f                 = params.bet_topup_before_eddy_f
        ext.eddy_cmd                                = params.eddy_cmd
        ext.dilate_b0_mask_prelim_brain_extraction  = params.dilate_b0_mask_prelim_brain_extraction
        ext.bet_prelim_f                            = params.bet_prelim_f
        ext.b0_thr_extract_b0                       = params.b0_thr_extract_b0
        ext.encoding                                = params.encoding_direction  //FIXME : this is subject bound, pass through meta ?
        ext.readout                                 = params.readout //FIXME : this is subject bound, pass through meta ?
    }

    withName: ".*:RUN:PREPROC_DWI:BETCROP_FSLBETCROP" {
        ext.bet_f   = params.bet_dwi_final_f
        ext.b0_thr  = params.b0_thr_extract_b0
        ext.crop    = true
        ext.dilate  = false
    }

    withName: ".*:RUN:PREPROC_DWI:N4_DWI" {
        ext.bspline_knot_per_voxel  = 1
        ext.shrink_factor           = 2
    }

    withName: ".*:RUN:PREPROC_DWI:NORMALIZE_DWI" {
        ext.dwi_shell_tolerance = params.dwi_shell_tolerance
        ext.max_dti_shell_value = params.max_dti_shell_value
        ext.dti_shells = params.dti_shells
        ext.fa_mask_threshold = params.fa_mask_threshold
    }

    withName: ".*:RUN:PREPROC_DWI:RESAMPLE_DWI" {
        ext.voxel_size      = params.dwi_resolution
        ext.interp          = params.dwi_interpolation
        ext.first_suffix    = "dwi"
    }

    withName: ".*:RUN:PREPROC_DWI:IMAGE_CROPVOLUME" {
        ext.output_bbox = false
    }

    withName: ".*:RUN:PREPROC_DWI:RESAMPLE_MASK" {
        ext.voxel_size      = params.dwi_resolution
        ext.interp          = "nn"
        ext.first_suffix    = "dwi_mask"
    }

    withName: ".*:RUN:PREPROC_T1:DENOISING_NLMEANS" {
        cpus = params.processes_denoise_t1
    }

    withName: ".*:RUN:PREPROC_T1:IMAGE_CROPVOLUME_T1" {
        ext.output_bbox     = true
        ext.first_suffix    = "t1"
    }

    withName: ".*:RUN:PREPROC_T1:IMAGE_RESAMPLE" {
        ext.voxel_size      = params.t1_resolution
        ext.interp          = params.t1_interpolation
        ext.first_suffix    = "t1"
    }

    withName: ".*:RUN:PREPROC_T1:BETCROP_ANTSBET" {
        cpus = params.processes_brain_extraction_t1
    }

    withName: ".*:RUN:T1_REGISTRATION:REGISTRATION_ANATTODWI" {
        cpus = params.processes_registration
    }

    //withName: ".*:RUN:ANATOMICAL_SEGMENTATION:SEGMENTATION_FASTSEG" {
        // Nothing to do !
    //}

    //withName: ".*:RUN:ANATOMICAL_SEGMENTATION:SEGMENTATION_FREESURFERSEG" {
        // Nothing to do !
    //}

    /* MODULES CONFIGURATION */

    withName: ".*:RUN:TRANSFORM_WMPARC" {
        ext.dimensionality  = 3
        ext.image_type      = 0
        ext.interpolation   = "NearestNeighbor"
        ext.output_dtype    = "uchar"
        ext.default_val     = 0
    }

    withName: ".*:RUN:TRANSFORM_APARC_ASEG" {
        ext.dimensionality  = 3
        ext.image_type      = 0
        ext.interpolation   = "MultiLabel"
        ext.output_dtype    = "short"
        ext.default_val     = 0
    }

    withName: ".*:RUN:TRANSFORM_LESION_MASK" {
        ext.dimensionality  = 3
        ext.image_type      = 0
        ext.interpolation   = "NearestNeighbor"
        ext.output_dtype    = "uchar"
        ext.default_val     = 0
    }

    withName: ".*:RUN:TRANSFORM_BRAINMASK" {
        ext.dimensionality  = 3
        ext.image_type      = 0
        ext.interpolation   = "NearestNeighbor"
        ext.output_dtype    = "uchar"
        ext.default_val     = 0
    }

    withName: ".*:RECONST_SHSIGNAL" {
        ext.dwi_shell_tolerance = params.dwi_shell_tolerance
        ext.b0_thr_extract_b0 = params.b0_thr_extract_b0
        ext.shells_to_fit = params.sh_fitting_shells
        ext.sh_order = params.sh_fitting_order
        ext.sh_basis = params.sh_fitting_basis
    }

    withName: ".*:RUN:RECONST_FRF" {
        ext.fa          = params.fa
        ext.fa_min      = params.min_fa
        ext.nvox_min    = params.min_nvox
        ext.roi_radius  = params.roi_radius
        ext.set_frf     = params.manual_frf ? true : false
        ext.manual_frf  = params.manual_frf
    }

    //withName: "RECONST_MEANFRF" {
        // Nothing to do !
    //}

    withName: ".*:RUN:RECONST_DTIMETRICS" {
        ext.ad                  = true
        ext.evecs               = true
        ext.evals               = true
        ext.fa                  = true
        ext.ga                  = true
        ext.rgb                 = true
        ext.md                  = true
        ext.mode                = true
        ext.norm                = true
        ext.rd                  = true
        ext.tensor              = true
        ext.nonphysical         = true
        ext.pulsation           = true
        ext.residual            = true
        ext.max_dti_shell_value = params.max_dti_shell_value
        ext.dti_shells          = params.dti_shells
    }

    withName: ".*:RUN:RECONST_FODF" {
        cpus = params.processes_fodf

        ext.b0_thr_extract_b0       = params.b0_thr_extract_b0
        ext.dwi_shell_tolerance     = params.dwi_shell_tolerance
        ext.min_fodf_shell_value    = params.min_fodf_shell_value
        ext.fodf_shells             = params.fodf_shells
        ext.sh_order                = params.sh_order
        ext.sh_basis                = params.basis
        ext.fa_threshold            = params.max_fa_in_ventricle
        ext.md_threshold            = params.min_md_in_ventricle
        ext.relative_threshold      = params.relative_threshold
        ext.fodf_metrics_a_factor   = params.fodf_metrics_a_factor
        ext.absolute_peaks          = true
        ext.peaks                   = true
        ext.peak_indices            = true
        ext.afd_max                 = true
        ext.afd_total               = true
        ext.afd_sum                 = true
        ext.nufo                    = true
    }

    withName: ".*:RUN:TRACKING_PFTTRACKING" {
        ext.pft_seeding_mask_type           = params.pft_seeding_mask_type
        ext.pft_fa_seeding_mask_threshold   = params.pft_fa_seeding_mask_threshold
        ext.pft_seeding                     = params.pft_seeding
        ext.pft_nbr_seeds                   = params.pft_nbr_seeds
        ext.pft_algo                        = params.pft_algo
        ext.pft_step                        = params.pft_step
        ext.pft_theta                       = params.pft_theta
        ext.pft_sfthres                     = params.pft_sfthres
        ext.pft_sfthres_init                = params.pft_sfthres_init
        ext.pft_min_len                     = params.pft_min_len
        ext.pft_max_len                     = params.pft_max_len
        ext.pft_particles                   = params.pft_particles
        ext.pft_back                        = params.pft_back
        ext.pft_front                       = params.pft_front
        ext.pft_random_seed                 = params.pft_random_seed
        ext.pft_compress_streamlines        = params.pft_compress_value > 0
        ext.pft_compress_value              = params.pft_compress_value
        ext.basis                           = params.basis
    }

    withName: ".*:RUN:TRACKING_LOCALTRACKING" {
        cpus = params.processes_local_tracking

        ext.enable_gpu                          = params.local_tracking_gpu
        ext.gpu_batch_size                      = params.local_tracking_gpu ? params.local_batch_size_gpu : null
        ext.local_tracking_mask_type            = params.local_tracking_mask_type
        ext.local_fa_tracking_mask_threshold    = params.local_fa_tracking_mask_threshold
        ext.local_seeding_mask_type             = params.local_seeding_mask_type
        ext.local_fa_seeding_mask_threshold     = params.local_fa_seeding_mask_threshold
        ext.local_seeding                       = params.local_seeding
        ext.local_nbr_seeds                     = params.local_nbr_seeds
        ext.local_algo                          = params.local_algo
        ext.local_step                          = params.local_step
        ext.local_theta                         = params.local_theta
        ext.local_sfthres                       = params.local_sfthres
        ext.local_min_len                       = params.local_min_len
        ext.local_max_len                       = params.local_max_len
        ext.local_random_seed                   = params.local_random_seed
        ext.local_compress_streamlines          = params.local_compress_value > 0
        ext.local_compress_value                = params.local_compress_value
        ext.basis                               = params.basis
    }

    withName: "MULTIQC" {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : "" }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

}
