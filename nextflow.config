/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    scilus/nf-tractoflow Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    //*Input + Output options (non-file)**//
    clean_bids                                      = false
    b0_thr_extract_b0                               = 10
    dwi_shell_tolerance                             = 20

    //*DWI Processing options**//
    bet_prelim_f                                    = 0.16
    dilate_b0_mask_prelim_brain_extraction          = 5


    //**Denoise dwi (dwidenoise in Mrtrix3)**//
    run_dwi_denoising                               = true
    extent                                          = 7

    //**GIBBS CORRECTION (mrdegibbs in Mrtrix3)**//
    run_gibbs_correction                            = false

    //**Topup**//
    run_topup                                       = true
    encoding_direction                              = "y"
    readout                                         = 0.062
    config_topup                                    = "b02b0.cnf"
    prefix_topup                                    = "topup_results"

    //**Eddy**//
    run_eddy                                        = true
    eddy_cmd                                        = "eddy_cpu"
    bet_topup_before_eddy_f                         = 0.16
    use_slice_drop_correction                       = true
    bet_dwi_final_f                                 = 0.16

    //**Normalize DWI**//
    fa_mask_threshold                               = 0.4

    //**Denoise T1**//
    run_t1_denoising                                = true
    template_t1                                     = "/human-data/mni_152_sym_09c/t1"

    //**Resample DWI**//
    run_resample_dwi                                = true
    dwi_resolution                                  = 1
    dwi_interpolation                               = "lin"

    //**Resample T1**//
    run_resample_t1                                 = true
    t1_resolution                                   = 1
    t1_interpolation                                = "lin"

    //**Extract DTI shells using this value as maximum**//
    max_dti_shell_value                             = 1200
    dti_shells                                      = null

    //**Extract fODF shells using this value as minimum**//
    min_fodf_shell_value                            = 700
    fodf_shells                                     = null

    //**Compute fiber response function (frf)**//
    fa                                              = 0.7
    min_fa                                          = 0.5
    min_nvox                                        = 300
    roi_radius                                      = 20
    manual_frf                                      = null

    //**Mean fiber response function (frf)**//
    mean_frf                                        = false

    //**Compute fODF metrics**//
    sh_order                                        = 8
    basis                                           = "descoteaux07"
    fodf_metrics_a_factor                           = 2.0
    relative_threshold                              = 0.1
    max_fa_in_ventricle                             = 0.1
    min_md_in_ventricle                             = 0.003

    //**SH fitting**//
    sh_fitting                                      = true
    sh_fitting_order                                = 6
    sh_fitting_basis                                = "descoteaux07"
    sh_fitting_shells                               = null

    //**PFT tracking**//
    run_pft_tracking                                = true
    pft_seeding_mask_type                           = "wm"
    pft_fa_seeding_mask_threshold                   = 0.1
    pft_algo                                        = "prob"
    pft_seeding                                     = "npv"
    pft_nbr_seeds                                   = 10
    pft_step                                        = 0.5
    pft_theta                                       = 20
    pft_min_len                                     = 20
    pft_max_len                                     = 200
    pft_compress_value                              = 0.2
    pft_random_seed                                 = 0
    pft_sfthres                                     = 0.1
    pft_sfthres_init                                = 0.5
    pft_particles                                   = 15
    pft_back                                        = 2.0
    pft_front                                       = 1.0

    //**Local tracking (LT)**//
    run_local_tracking                              = true
    local_seeding_mask_type                         = "wm"
    local_fa_seeding_mask_threshold                 = 0.1
    local_tracking_mask_type                        = "wm"
    local_fa_tracking_mask_threshold                = 0.1
    local_algo                                      = "prob"
    local_seeding                                   = "npv"
    local_nbr_seeds                                 = 10
    local_step                                      = 0.5
    local_theta                                     = 20
    local_min_len                                   = 20
    local_max_len                                   = 200
    local_compress_value                            = 0.2
    local_random_seed                               = 0
    local_batch_size_gpu                            = 10000     //FIXME : this should be computed
    local_tracking_gpu                              = false
    local_sfthres                                   = 0.1
    local_sfthres_init                              = 0.5

    //**Processes Maximum CPU allocation**//
    processes_denoise_dwi                           = 4
    processes_eddy                                  = 4
    processes_fodf                                  = 4
    processes_local_tracking                        = 4
    processes_denoise_t1                            = 4
    processes_brain_extraction_t1                   = 4
    processes_registration                          = 4

    // Input options
    input                      = null
    bids                       = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    help                         = false
    help_full                    = false
    show_hidden                  = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'
    trace_report_suffix          = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')// Config options
    config_profile_name          = null
    config_profile_description   = null

    custom_config_version        = 'master'
    custom_config_base           = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact       = null
    config_profile_url           = null

    // Schema validation default options
    validate_params              = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 4.h
            ]
        }
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

// Load scilus/nf-tractoflow custom profiles from different institutions.
// TODO nf-core: Optionally, you can add a pipeline-specific nf-core config at https://github.com/nf-core/configs
// includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/nf-tractoflow.config" : "/dev/null"

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'docker.io'
docker.registry       = 'docker.io'
podman.registry       = 'docker.io'
singularity.registry  = 'docker.io'
charliecloud.registry = 'docker.io'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
}

manifest {
    name            = 'scilus/nf-tractoflow'
    author          = """@AlexVCaron"""
    contributors    = [
        [
            name: '@AlexVCaron',
            affiliation: 'Sherbrooke Connectivity Imaging Lab (SCIL) - Université de Sherbrooke',
            email: 'alex.valcourt.caron@usherbrooke.ca',
            github: 'https://github.com/AlexVCaron',
            contribution: ['author', 'maintainer', 'contributor'], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: '0000-0002-1206-6395'
        ],
        [
            name: '@arnaudbore',
            affiliation: 'Sherbrooke Connectivity Imaging Lab (SCIL) - Université de Sherbrooke',
            email: 'arnaud.bore@usherbrooke.ca',
            github: 'https://github.com/arnaudbore',
            contribution: ['author', 'maintainer', 'contributor'],
            orcid: '0000-0002-4822-1211'
        ],
        [
            name: '@GuillaumeTh',
            affiliation: 'Université de Montréal affiliated research center (CRCHUM)',
            email: '',
            github: 'https://github.com/guillaumeth',
            contribution: ['author'],
            orcid: '0000-0002-8440-1009'
        ],
    ]
    homePage        = 'https://github.com/scilus/nf-tractoflow'
    description     = """Human diffusion MRI processing and tractography"""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0dev'
    doi             = ''
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.3.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

validation {
    defaultIgnoreParams = ["genomes"]
    monochromeLogs = params.monochrome_logs
    help {
        enabled = true
        command = "nextflow run scilus/nf-tractoflow -profile <docker/singularity/.../institute> <--input|--bids samplesheet.csv> --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
