nextflow_process {

    name "Test Process RECONST_FRF"
    script "../main.nf"
    process "RECONST_FRF"

    tag "modules"
    tag "modules_nfcore"
    tag "reconst"
    tag "reconst/frf"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "heavy.zip" , "commit_amico.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("reconst - frf") {

        config "./nextflow.config"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        ssst: it.simpleName == "heavy"
                        msmt: it.simpleName == "commit_amico"
                    }
                input[0] = ch_split_test_data.ssst.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bvec", checkIfExists: true),
                        file("\${test_data_directory}/dwi/mask.nii.gz", checkIfExists: true),
                        [],
                        [],
                        []
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("reconst - frf_no_mask") {

        config "./nextflow.config"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        ssst: it.simpleName == "heavy"
                        msmt: it.simpleName == "commit_amico"
                    }
                input[0] = ch_split_test_data.ssst.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bvec", checkIfExists: true),
                        [],
                        [],
                        [],
                        []
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("reconst - frf_set_frf") {

        config "./nextflow_set_frf.config"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        ssst: it.simpleName == "heavy"
                        msmt: it.simpleName == "commit_amico"
                    }
                input[0] = ch_split_test_data.ssst.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bvec", checkIfExists: true),
                        file("\${test_data_directory}/dwi/mask.nii.gz", checkIfExists: true),
                        [],
                        [],
                        []
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("reconst - frf_set_frf_no_mask") {

        config "./nextflow_set_frf.config"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        ssst: it.simpleName == "heavy"
                        msmt: it.simpleName == "commit_amico"
                    }
                input[0] = ch_split_test_data.ssst.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi/dwi.bvec", checkIfExists: true),
                        [],
                        [],
                        [],
                        []
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("reconst - frf_msmt") {

        config "./nextflow_msmt.config"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        ssst: it.simpleName == "heavy"
                        msmt: it.simpleName == "commit_amico"
                    }
                input[0] = ch_split_test_data.msmt.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bvec", checkIfExists: true),
                        file("\${test_data_directory}/mask.nii.gz", checkIfExists: true),
                        [],
                        [],
                        []
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("reconst - frf_msmt_set_frf") {

        config "./nextflow_msmt_set_frf.config"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        ssst: it.simpleName == "heavy"
                        msmt: it.simpleName == "commit_amico"
                    }
                input[0] = ch_split_test_data.msmt.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bvec", checkIfExists: true),
                        file("\${test_data_directory}/mask.nii.gz", checkIfExists: true),
                        [],
                        [],
                        []
                    ]
                }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
