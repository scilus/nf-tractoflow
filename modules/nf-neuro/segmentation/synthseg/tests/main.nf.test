nextflow_process {

    name "Test Process SEGMENTATION_SYNTHSEG"
    script "../main.nf"
    process "SEGMENTATION_SYNTHSEG"

    tag "modules"
    tag "modules_nfcore"
    tag "segmentation"
    tag "segmentation/synthseg"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "heavy.zip", "freesurfer.zip", "processing.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

// ** Assertion only uses file name since there is a discrepancy when tests are ran remotly. ** //
// ** Synthseg's direct output was emitted as an output to help assess its non-reproductibility ** //
// ** Synthseg is an AI model and freesurfer does not control for randomness in computation yet, both in terms of seeding and operation ordering.** //

    test("segmentation - synthseg - basic") {
        config "./nextflow_basic.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        heavy: it.simpleName == "heavy"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                ch_anat = ch_split_test_data.heavy.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/anat/anat_image.nii.gz"),
                        []
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                input[0] = ch_anat
                    .join(ch_license)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.wm_mask.get(0).get(1)).name,
                    file(process.out.gm_mask.get(0).get(1)).name,
                    file(process.out.csf_mask.get(0).get(1)).name,
                    file(process.out.wm_map.get(0).get(1)).name,
                    file(process.out.gm_map.get(0).get(1)).name,
                    file(process.out.csf_map.get(0).get(1)).name,
                    file(process.out.seg.get(0).get(1)).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("segmentation - synthseg - options") {
        config "./nextflow_options.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        processing: it.simpleName == "processing"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                ch_anat = ch_split_test_data.processing.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/mni_masked_2x2x2.nii.gz"),
                        []
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                input[0] = ch_anat
                    .join(ch_license)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.wm_mask.get(0).get(1)).name,
                    file(process.out.gm_mask.get(0).get(1)).name,
                    file(process.out.csf_mask.get(0).get(1)).name,
                    file(process.out.wm_map.get(0).get(1)).name,
                    file(process.out.gm_map.get(0).get(1)).name,
                    file(process.out.csf_map.get(0).get(1)).name,
                    file(process.out.aparc_aseg.get(0).get(1)).name,
                    niftiMD5SUM(process.out.resample.get(0).get(1)),
                    process.out.volume,
                    process.out.qc_score,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("segmentation - synthseg - lesion") {
        config "./nextflow_basic.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        heavy: it.simpleName == "heavy"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                ch_anat = ch_split_test_data.heavy.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/anat/anat_image.nii.gz"),
                        file("\${test_data_directory}/anat/anat_mask.nii.gz")
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                input[0] = ch_anat
                    .join(ch_license)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.wm_mask.get(0).get(1)).name,
                    file(process.out.gm_mask.get(0).get(1)).name,
                    file(process.out.csf_mask.get(0).get(1)).name,
                    file(process.out.wm_map.get(0).get(1)).name,
                    file(process.out.gm_map.get(0).get(1)).name,
                    file(process.out.csf_map.get(0).get(1)).name,
                    file(process.out.seg.get(0).get(1)).name,
                    process.out.versions
                ).match() }
            )
        }
    }
}
