nextflow_process {

    name "Test Process PREPROC_NORMALIZE"
    script "../main.nf"
    process "PREPROC_NORMALIZE"

    tag "modules"
    tag "modules_nfcore"
    tag "preproc"
    tag "preproc/normalize"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "heavy.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("preproc - normalize") {
        config "./nextflow.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                    [ id:'test', single_end:false ], // meta map
                    file("\${test_data_directory}/dwi/dwi.nii.gz", checkIfExists: true),
                    file("\${test_data_directory}/dwi/dwi.bval", checkIfExists: true),
                    file("\${test_data_directory}/dwi/dwi.bvec", checkIfExists: true),
                    file("\${test_data_directory}/dwi/mask.nii.gz", checkIfExists: true)
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("preproc - normalize - dti shells") {
        config "./nextflow_with_dti_shells.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                    [ id:'test', single_end:false ], // meta map
                    file("\${test_data_directory}/dwi/dwi.nii.gz", checkIfExists: true),
                    file("\${test_data_directory}/dwi/dwi.bval", checkIfExists: true),
                    file("\${test_data_directory}/dwi/dwi.bvec", checkIfExists: true),
                    file("\${test_data_directory}/dwi/mask.nii.gz", checkIfExists: true)
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
