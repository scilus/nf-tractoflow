
nextflow_workflow {

    name "Test Subworkflow TRACTOFLOW"
    script "../main.nf"
    config "../nextflow.config"
    workflow "TRACTOFLOW"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/tractoflow"

    tag "load_test_data"
    tag "subworkflows/anatomical_segmentation"
    tag "subworkflows/preproc_dwi"
    tag "subworkflows/preproc_t1"
    tag "subworkflows/registration"

    tag "reconst/dtimetrics"
    tag "reconst/frf"
    tag "reconst/fodf"
    tag "reconst/meanfrf"
    tag "registration/antsapplytransforms"
    tag "tracking/localtracking"
    tag "tracking/pfttracking"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "antsbet.zip", "raw_DWIss1000-dir32.zip", "raw_T1w.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("tractoflow - no rev") {
        when {
            params {
                pft_number_of_seeds = 1
                pft_number_of_particles = 4
                lt_number_of_seeds = 1
            }
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        dwi: it.simpleName == "raw_DWIss1000-dir32"
                        t1w: it.simpleName == "raw_T1w"
                        template: it.simpleName == "antsbet"
                    }
                input[0] = ch_split_test_data.dwi.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/dwi.nii.gz"),
                        file("\${test_data_directory}/dwi.bval"),
                        file("\${test_data_directory}/dwi.bvec")
                    ]}
                input[1] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]}
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                input[4] = Channel.empty()
                input[5] = Channel.empty()
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                input[8] = ch_split_test_data.template.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/t1_template.nii.gz")
                    ]}
                input[9] = ch_split_test_data.template.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/t1_brain_probability_map.nii.gz")
                    ]}
                input[10] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                {
                    assert snapshot(
                                                                                                    // IN DIFFUSION SPACE
                        file(workflow.out.dwi.get(0).get(1)).name,                                  //  dwi
                        workflow.out.dwi.get(0).get(2),                                             //  bval
                        workflow.out.dwi.get(0).get(3),                                             //  bvec
                        file(workflow.out.t1.get(0).get(1)).name,                                   //  t1
                        file(workflow.out.wm_mask.get(0).get(1)).name,                              //  wm_mask
                        file(workflow.out.gm_mask.get(0).get(1)).name,                              //  gm_mask
                        file(workflow.out.csf_mask.get(0).get(1)).name,                             //  csf_mask
                        file(workflow.out.wm_map.get(0).get(1)).name,                               //  wm_map
                        file(workflow.out.gm_map.get(0).get(1)).name,                               //  gm_map
                        file(workflow.out.csf_map.get(0).get(1)).name,                              //  csf_map
                                                                                                    // REGISTRATION
                                                                                                    //  anatomical_to_diffusion
                        file(workflow.out.anatomical_to_diffusion.get(0).get(1)).name,              //   warp (or affine)
                        workflow.out.anatomical_to_diffusion.get(0).get(2)
                            ? file(workflow.out.anatomical_to_diffusion.get(0).get(2)).name : "",   //   affine
                                                                                                    //  diffusion_to_anatomical
                        file(workflow.out.diffusion_to_anatomical.get(0).get(1)).name,              //   affine (or warp)
                        workflow.out.diffusion_to_anatomical.get(0).get(2)
                            ? file(workflow.out.diffusion_to_anatomical.get(0).get(2)).name : "",   //   warp
                                                                                                    // IN ANATOMICAL SPACE
                        file(workflow.out.t1_native.get(0).get(1)).name,                            //  t1_native
                                                                                                    // DTI
                        file(workflow.out.dti_tensor.get(0).get(1)).name,                           //  dti_tensor
                        file(workflow.out.dti_md.get(0).get(1)).name,                               //  dti_md
                        file(workflow.out.dti_rd.get(0).get(1)).name,                               //  dti_rd
                        file(workflow.out.dti_ad.get(0).get(1)).name,                               //  dti_ad
                        file(workflow.out.dti_fa.get(0).get(1)).name,                               //  dti_fa
                        file(workflow.out.dti_rgb.get(0).get(1)).name,                              //  dti_rgb
                        file(workflow.out.dti_peaks.get(0).get(1)).name,                            //  dti_peaks
                        file(workflow.out.dti_evecs.get(0).get(1)).name,                            //  dti_evecs
                        file(workflow.out.dti_evals.get(0).get(1)).name,                            //  dti_evals
                        file(workflow.out.dti_residual.get(0).get(1)).name,                         //  dti_residual
                        file(workflow.out.dti_ga.get(0).get(1)).name,                               //  dti_ga
                        file(workflow.out.dti_mode.get(0).get(1)).name,                             //  dti_mode
                        file(workflow.out.dti_norm.get(0).get(1)).name,                             //  dti_norm
                                                                                                    // FODF
                        file(workflow.out.fiber_response.get(0).get(1)).name,                       //  fiber_response
                        file(workflow.out.fodf.get(0).get(1)).name,                                 //  fodf
                        file(workflow.out.fodf_peaks.get(0).get(1)).name,                           //  fodf_peaks
                        file(workflow.out.afd_max.get(0).get(1)).name,                              //  afd_max
                        file(workflow.out.afd_total.get(0).get(1)).name,                            //  afd_total
                        file(workflow.out.afd_sum.get(0).get(1)).name,                              //  afd_sum
                        file(workflow.out.nufo.get(0).get(1)).name,                                 //  nufo
                                                                                                    // TRACKING
                        file(workflow.out.pft_tractogram.get(0).get(1)).name,                       //  pft_tractogram
                        file(workflow.out.pft_config.get(0).get(1)).name,                           //  pft_config
                        file(workflow.out.pft_map_include.get(0).get(1)).name,                      //  pft_map_include
                        file(workflow.out.pft_map_exclude.get(0).get(1)).name,                      //  pft_map_exclude
                        file(workflow.out.pft_seeding_mask.get(0).get(1)).name,                     //  pft_seeding_mask
                        file(workflow.out.local_tractogram.get(0).get(1)).name,                     //  local_tractogram
                        file(workflow.out.local_config.get(0).get(1)).name,                         //  local_config
                        file(workflow.out.local_seeding_mask.get(0).get(1)).name,                   //  local_seeding_mask
                        file(workflow.out.local_tracking_mask.get(0).get(1)).name,                  //  local_tracking_mask
                                                                                                    // QC
                        file(workflow.out.nonphysical_voxels.get(0).get(1)).name,                   //  nonphysical_voxels
                        file(workflow.out.pulsation_in_dwi.get(0).get(1)).name,                     //  pulsation_in_dwi
                        file(workflow.out.pulsation_in_b0.get(0).get(1)).name,                      //  pulsation_in_b0
                        file(workflow.out.dti_residual_stats.get(0).get(1)).name,                   //  dti_residual_stats
                        workflow.out.versions                                                       // versions
                    ).match()
                }
            )
        }
    }
}
